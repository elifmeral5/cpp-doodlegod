//Title: Game.h
//Author: Jeremy Dixon
//Date: 2/18/2025
//Description: This is part of the DoodleGod Project in CMSC 202 @ UMBC

//Do not edit this file

#ifndef GAME_H //Header Guard
#define GAME_H //Header Guard
#include <fstream>
#include <iostream>
#include "Element.h" //Class for elements
#include "DoodleGod.h" //Class for Doodle God

//Constants
const string PROJ2_RECIPES = "proj2_recipes.txt"; //File constant

class Game{
public:
  // Name: Game() Default Constructor
  // Desc - Empty default constructor
  // Preconditions - None
  // Postconditions - None
  Game(); //Default Constructor
  // Name: LoadRecipes
  // Desc - A recipe is what elements are required to merge in order to create a new element
  //        For example, if you merge Fire and Earth, you get Lava.
  //        Loads each recipe from provided file (Must use getline)
  // Preconditions - Requires file with valid element/recipe data
  // Postconditions - m_elements is populated with valid recipe data
  void LoadRecipes();
  // Name: StartGame()
  // Desc: 1. Loads all recipes into m_elements (by making elements)
  //       2. Asks user for their DoodleGod's name
  //          (store in m_myDoodleGod as m_myName)
  //       3. Adds Fire, Water, Air, and Earth to Doodle God's known element list
  //	      (in m_myDoodleGod)
  //       4. Manages the game itself including win conditions continually
  //         calling the main menu 
  // Preconditions - None
  // Postconditions - Continually checks to see if player has quit
  void StartGame();
  // Name: DisplayMyElements()
  // Desc - Displays the current elements
  // Preconditions - Player has elements
  // Postconditions - Displays a numbered list of elements
  void DisplayElements();
  // Name: MainMenu()
  // Desc - Displays and manages menu
  // Preconditions - Player has an DoodleGod
  // Postconditions - Returns number including exit
  int MainMenu();
  // Name: CombineElements()
  // Desc - Attempts to combine known elements
  // Preconditions - DoodleGod is populated with elements
  // Postconditions - May add element to DoodleGod's list of elements
  void CombineElements();
  // Name: RequestElement()
  // Desc - Asks user to chose an element to try and merge.
  //        Checks to make sure value in range
  // Preconditions - DoodleGod has elements to try and merge
  // Postconditions - Updates choice (pass by reference)
  void RequestElement(int &choice);
  // Name: SearchRecipes()
  // Desc - Searches recipes for two strings passed
  // Preconditions - m_elements is populated
  // Postconditions - Returns int index of matching recipe
  int SearchRecipes(string, string);
  // Name: CalcScore()
  // Desc - Displays current score for Doodle God
  // Preconditions - Doodle God is populated with elements
  // Postconditions - None
  void CalcScore();
  // Name: GameTitle()
  // Desc - Title for Game (Do not edit)
  // Preconditions - None
  // Postconditions - None
  void GameTitle(){
    cout << "**************************************************************" << endl;
    cout << " DDD   OOOO  OOOO  DDD   L    EEEE  GGGG  OOOO  DDD  " << endl;
    cout << " D  D  O  O  O  O  D  D  L    E     G     O  O  D  D " << endl;
    cout << " D  D  O  O  O  O  D  D  L    EEEE  G GG  O  O  D  D " << endl;
    cout << " D  D  O  O  O  O  D  D  L    E     G  G  O  O  D  D " << endl;
    cout << " DDD   OOOO  OOOO  DDD   LLLL EEEE  GGGG  OOOO  DDD  " << endl;
    cout << "**************************************************************" << endl;
  }
private:
  DoodleGod m_myDoodleGod; //Player's Doodle God for the game
  Element m_elements[PROJ2_SIZE]; //Holds all elements and recipes in game
};

#endif //Exit Header Guard

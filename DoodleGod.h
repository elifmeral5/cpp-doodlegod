//Title: DoodleGod.h
//Author: Jeremy Dixon
//Date: 2/18/2025
//Description: This is part of the DoodleGod Project in CMSC 202 @ UMBC
// This is the base project header file

//Do not edit this file

#ifndef DOODLEGOD_H //Include/Header Guard
#define DOODLEGOD_H //Include/Header Guard

#include "Element.h" //Include for the element struct
#include <iostream>
#include <string>
#include <cstdlib>
#include <iomanip>
using namespace std;

//Constants
const int PROJ2_SIZE = 139; //Total number of elements in starting file

// Class Declaration
class DoodleGod{
 public:
  // Name: DoodleGod() - Default Constructor
  // Desc: Used to build a new DoodleGod
  // Preconditions - None
  // Postconditions - Creates a new DoodleGod and sets default values to 0 for all integers
  DoodleGod();
  // Name: DoodleGod(name) - Overloaded constructor
  // Desc - Used to build a new DoodleGod
  // Preconditions - Requires name
  // Postconditions - Creates a new DoodleGod and sets default values to 0 for all integers
  DoodleGod(string name);
  // Name: GetName()
  // Desc - Getter for DoodleGod name
  // Preconditions - DoodleGod exists
  // Postconditions - Returns the name of the DoodleGod
  string GetName();
  // Name: SetName(string)
  // Desc - Allows the user to change the name of the DoodleGod
  // Preconditions - DoodleGod exists
  // Postconditions - Sets name of DoodleGod
  void SetName(string name);
  // Name: DisplayElements()
  // Desc - Displays a numbered list of all elements known by the DoodleGod
  // Preconditions - DoodleGod exist
  // Postconditions - Displays numbered list of all known elements
  void DisplayElements();
  // Name: GetNumElements()
  // Desc - Returns number of elements known by the DoodleGod
  // Preconditions - DoodleGod exists
  // Postconditions - Returns the integer value of all known elements
  int GetNumElements();
  // Name: CheckElement(Element)
  // Desc - Checks to see if the DoodleGod had identified an element
  // Preconditions - DoodleGod already has elements
  // Postconditions - Returns true if DoodleGod has element else false
  bool CheckElement(Element);
  // Name: AddElement(Element)
  // Desc - Adds element to m_myElements if not known and increases numElements
  // Preconditions - DoodleGod exists and new element not already known
  // Postconditions - Adds element to m_myElements
  void AddElement(Element);
  // Name: GetElement(int)
  // Desc - Checks to see if the DoodleGod has an element
  // Preconditions - DoodleGod already has elements
  // Postconditions - Returns element at index
  Element GetElement(int);
  // Name: AddAttempt
  // Desc - Increments attempts
  // Preconditions - DoodleGod attempts a merge
  // Postconditions - Increments every time a merge is attempted
  void AddAttempt();
  // Name: GetAttempts()
  // Desc - Returns number of attempts for that DoodleGod
  // Preconditions - DoodleGod exists
  // Postconditions - Returns total number of attempts
  int GetAttempts();
  // Name: AddRepeat()
  // Desc - Increments repeats for every time an element has already been found
  // Preconditions - DoodleGod attempts a merge
  // Postconditions - Increments every time a merge yields an element already found
  void AddRepeat();
  // Name: GetRepeats()
  // Desc - Returns number of repeats for that DoodleGod
  // Preconditions - DoodleGod exists
  // Postconditions - Returns total number of repeats
  int GetRepeats();
private:
  string m_myName; //Name of DoodleGod
  int m_attempts; //Total Combination Attempts
  int m_repeats; //Combination Attempts Repeated
  int m_numElements; //Number of unique elements known to the DoodleGod
  Element m_myElements[PROJ2_SIZE] = {}; //List of elements known to the DoodleGod
};

#endif //Exit Header Guard
